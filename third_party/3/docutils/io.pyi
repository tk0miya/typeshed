# Stubs for docutils.io (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from docutils import TransformSpec
from typing import Any, Optional

__docformat__: str

class InputError(IOError): ...
class OutputError(IOError): ...

def check_encoding(stream, encoding): ...

class Input(TransformSpec):
    component_type: str = ...
    default_source_path: Any = ...
    encoding: Any = ...
    error_handler: Any = ...
    source: Any = ...
    source_path: Any = ...
    successful_encoding: Any = ...
    def __init__(self, source: Optional[Any] = ..., source_path: Optional[Any] = ..., encoding: Optional[Any] = ..., error_handler: str = ...) -> None: ...
    def read(self): ...
    def decode(self, data): ...
    coding_slug: Any = ...
    byte_order_marks: Any = ...
    def determine_encoding_from_data(self, data): ...

class Output(TransformSpec):
    component_type: str = ...
    default_destination_path: Any = ...
    encoding: Any = ...
    error_handler: Any = ...
    destination: Any = ...
    destination_path: Any = ...
    def __init__(self, destination: Optional[Any] = ..., destination_path: Optional[Any] = ..., encoding: Optional[Any] = ..., error_handler: str = ...) -> None: ...
    def write(self, data): ...
    def encode(self, data): ...

class FileInput(Input):
    autoclose: Any = ...
    source: Any = ...
    source_path: Any = ...
    def __init__(self, source: Optional[Any] = ..., source_path: Optional[Any] = ..., encoding: Optional[Any] = ..., error_handler: str = ..., autoclose: bool = ..., mode: str = ..., **kwargs) -> None: ...
    def read(self): ...
    def readlines(self): ...
    def close(self): ...

class FileOutput(Output):
    mode: str = ...
    opened: bool = ...
    autoclose: Any = ...
    destination: Any = ...
    destination_path: Any = ...
    def __init__(self, destination: Optional[Any] = ..., destination_path: Optional[Any] = ..., encoding: Optional[Any] = ..., error_handler: str = ..., autoclose: bool = ..., handle_io_errors: Optional[Any] = ..., mode: Optional[Any] = ...) -> None: ...
    def open(self): ...
    def write(self, data): ...
    def close(self): ...

class BinaryFileOutput(FileOutput):
    mode: str = ...

class StringInput(Input):
    default_source_path: str = ...
    def read(self): ...

class StringOutput(Output):
    default_destination_path: str = ...
    destination: Any = ...
    def write(self, data): ...

class NullInput(Input):
    default_source_path: str = ...
    def read(self): ...

class NullOutput(Output):
    default_destination_path: str = ...
    def write(self, data): ...

class DocTreeInput(Input):
    default_source_path: str = ...
    def read(self): ...
