# Stubs for docutils.frontend (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import configparser as CP
import docutils.nodes
import optparse
from typing import Any, Optional

__docformat__: str

def store_multiple(option, opt, value, parser, *args, **kwargs): ...
def read_config_file(option, opt, value, parser): ...
def validate_encoding(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_encoding_error_handler(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_encoding_and_error_handler(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_boolean(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_ternary(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_nonnegative_int(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_threshold(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_colon_separated_string_list(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_comma_separated_list(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_url_trailing_slash(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_dependency_file(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_strip_class(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def validate_smartquotes_locales(setting, value, option_parser, config_parser: Optional[Any] = ..., config_section: Optional[Any] = ...): ...
def make_paths_absolute(pathdict, keys, base_path: Optional[Any] = ...): ...
def make_one_path_absolute(base_path, path): ...
def filter_settings_spec(settings_spec, *exclude, **replace): ...

class Values(optparse.Values):
    record_dependencies: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def update(self, other_dict, option_parser): ...
    def copy(self): ...

class Option(optparse.Option):
    ATTRS: Any = ...
    def process(self, opt, value, values, parser): ...

class OptionParser(optparse.OptionParser, docutils.SettingsSpec):
    standard_config_files: Any = ...
    threshold_choices: Any = ...
    thresholds: Any = ...
    booleans: Any = ...
    default_error_encoding: Any = ...
    default_error_encoding_error_handler: str = ...
    settings_spec: Any = ...
    settings_defaults: Any = ...
    relative_path_settings: Any = ...
    config_section: str = ...
    version_template: Any = ...
    lists: Any = ...
    config_files: Any = ...
    version: Any = ...
    components: Any = ...
    def __init__(self, components: Any = ..., defaults: Optional[Any] = ..., read_config_files: Optional[Any] = ..., *args, **kwargs) -> None: ...
    def populate_from_components(self, components): ...
    def get_standard_config_files(self): ...
    def get_standard_config_settings(self): ...
    def get_config_file_settings(self, config_file): ...
    def check_values(self, values, args): ...
    def check_args(self, args): ...
    def set_defaults_from_dict(self, defaults): ...
    def get_default_values(self): ...
    def get_option_by_dest(self, dest): ...

class ConfigParser(CP.RawConfigParser):
    old_settings: Any = ...
    old_warning: str = ...
    not_utf8_error: str = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def read(self, filenames, option_parser): ...
    def handle_old_config(self, filename): ...
    def validate_settings(self, filename, option_parser): ...
    def optionxform(self, optionstr): ...
    def get_section(self, section): ...

class ConfigDeprecationWarning(DeprecationWarning): ...
