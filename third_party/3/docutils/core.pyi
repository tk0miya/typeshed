# Stubs for docutils.core (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

__docformat__: str

class Publisher:
    document: Any = ...
    reader: Any = ...
    parser: Any = ...
    writer: Any = ...
    source: Any = ...
    source_class: Any = ...
    destination: Any = ...
    destination_class: Any = ...
    settings: Any = ...
    def __init__(self, reader: Optional[Any] = ..., parser: Optional[Any] = ..., writer: Optional[Any] = ..., source: Optional[Any] = ..., source_class: Any = ..., destination: Optional[Any] = ..., destination_class: Any = ..., settings: Optional[Any] = ...) -> None: ...
    def set_reader(self, reader_name, parser, parser_name): ...
    def set_writer(self, writer_name): ...
    def set_components(self, reader_name, parser_name, writer_name): ...
    def setup_option_parser(self, usage: Optional[Any] = ..., description: Optional[Any] = ..., settings_spec: Optional[Any] = ..., config_section: Optional[Any] = ..., **defaults): ...
    def get_settings(self, usage: Optional[Any] = ..., description: Optional[Any] = ..., settings_spec: Optional[Any] = ..., config_section: Optional[Any] = ..., **defaults): ...
    def process_programmatic_settings(self, settings_spec, settings_overrides, config_section): ...
    def process_command_line(self, argv: Optional[Any] = ..., usage: Optional[Any] = ..., description: Optional[Any] = ..., settings_spec: Optional[Any] = ..., config_section: Optional[Any] = ..., **defaults): ...
    def set_io(self, source_path: Optional[Any] = ..., destination_path: Optional[Any] = ...): ...
    def set_source(self, source: Optional[Any] = ..., source_path: Optional[Any] = ...): ...
    def set_destination(self, destination: Optional[Any] = ..., destination_path: Optional[Any] = ...): ...
    def apply_transforms(self): ...
    def publish(self, argv: Optional[Any] = ..., usage: Optional[Any] = ..., description: Optional[Any] = ..., settings_spec: Optional[Any] = ..., settings_overrides: Optional[Any] = ..., config_section: Optional[Any] = ..., enable_exit_status: bool = ...): ...
    def debugging_dumps(self): ...
    def report_Exception(self, error): ...
    def report_SystemMessage(self, error): ...
    def report_UnicodeError(self, error): ...

default_usage: str
default_description: str

def publish_cmdline(reader: Optional[Any] = ..., reader_name: str = ..., parser: Optional[Any] = ..., parser_name: str = ..., writer: Optional[Any] = ..., writer_name: str = ..., settings: Optional[Any] = ..., settings_spec: Optional[Any] = ..., settings_overrides: Optional[Any] = ..., config_section: Optional[Any] = ..., enable_exit_status: bool = ..., argv: Optional[Any] = ..., usage: Any = ..., description: Any = ...): ...
def publish_file(source: Optional[Any] = ..., source_path: Optional[Any] = ..., destination: Optional[Any] = ..., destination_path: Optional[Any] = ..., reader: Optional[Any] = ..., reader_name: str = ..., parser: Optional[Any] = ..., parser_name: str = ..., writer: Optional[Any] = ..., writer_name: str = ..., settings: Optional[Any] = ..., settings_spec: Optional[Any] = ..., settings_overrides: Optional[Any] = ..., config_section: Optional[Any] = ..., enable_exit_status: bool = ...): ...
def publish_string(source, source_path: Optional[Any] = ..., destination_path: Optional[Any] = ..., reader: Optional[Any] = ..., reader_name: str = ..., parser: Optional[Any] = ..., parser_name: str = ..., writer: Optional[Any] = ..., writer_name: str = ..., settings: Optional[Any] = ..., settings_spec: Optional[Any] = ..., settings_overrides: Optional[Any] = ..., config_section: Optional[Any] = ..., enable_exit_status: bool = ...): ...
def publish_parts(source, source_path: Optional[Any] = ..., source_class: Any = ..., destination_path: Optional[Any] = ..., reader: Optional[Any] = ..., reader_name: str = ..., parser: Optional[Any] = ..., parser_name: str = ..., writer: Optional[Any] = ..., writer_name: str = ..., settings: Optional[Any] = ..., settings_spec: Optional[Any] = ..., settings_overrides: Optional[Any] = ..., config_section: Optional[Any] = ..., enable_exit_status: bool = ...): ...
def publish_doctree(source, source_path: Optional[Any] = ..., source_class: Any = ..., reader: Optional[Any] = ..., reader_name: str = ..., parser: Optional[Any] = ..., parser_name: str = ..., settings: Optional[Any] = ..., settings_spec: Optional[Any] = ..., settings_overrides: Optional[Any] = ..., config_section: Optional[Any] = ..., enable_exit_status: bool = ...): ...
def publish_from_doctree(document, destination_path: Optional[Any] = ..., writer: Optional[Any] = ..., writer_name: str = ..., settings: Optional[Any] = ..., settings_spec: Optional[Any] = ..., settings_overrides: Optional[Any] = ..., config_section: Optional[Any] = ..., enable_exit_status: bool = ...): ...
def publish_cmdline_to_binary(reader: Optional[Any] = ..., reader_name: str = ..., parser: Optional[Any] = ..., parser_name: str = ..., writer: Optional[Any] = ..., writer_name: str = ..., settings: Optional[Any] = ..., settings_spec: Optional[Any] = ..., settings_overrides: Optional[Any] = ..., config_section: Optional[Any] = ..., enable_exit_status: bool = ..., argv: Optional[Any] = ..., usage: Any = ..., description: Any = ..., destination: Optional[Any] = ..., destination_class: Any = ...): ...
def publish_programmatically(source_class, source, source_path, destination_class, destination, destination_path, reader, reader_name, parser, parser_name, writer, writer_name, settings, settings_spec, settings_overrides, config_section, enable_exit_status): ...
