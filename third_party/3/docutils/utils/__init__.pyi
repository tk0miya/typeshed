# Stubs for docutils.utils (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from docutils import ApplicationError, DataError
from typing import Any, Optional

__docformat__: str

class SystemMessage(ApplicationError):
    level: Any = ...
    def __init__(self, system_message, level) -> None: ...

class SystemMessagePropagation(ApplicationError): ...

class Reporter:
    levels: Any = ...
    DEBUG_LEVEL: Any = ...
    INFO_LEVEL: Any = ...
    WARNING_LEVEL: Any = ...
    ERROR_LEVEL: Any = ...
    SEVERE_LEVEL: Any = ...
    source: Any = ...
    error_handler: Any = ...
    debug_flag: Any = ...
    report_level: Any = ...
    halt_level: Any = ...
    stream: Any = ...
    encoding: Any = ...
    observers: Any = ...
    max_level: int = ...
    def __init__(self, source, report_level, halt_level, stream: Optional[Any] = ..., debug: bool = ..., encoding: Optional[Any] = ..., error_handler: str = ...) -> None: ...
    def set_conditions(self, category, report_level, halt_level, stream: Optional[Any] = ..., debug: bool = ...): ...
    def attach_observer(self, observer): ...
    def detach_observer(self, observer): ...
    def notify_observers(self, message): ...
    def system_message(self, level, message, *children, **kwargs): ...
    def debug(self, *args, **kwargs): ...
    def info(self, *args, **kwargs): ...
    def warning(self, *args, **kwargs): ...
    def error(self, *args, **kwargs): ...
    def severe(self, *args, **kwargs): ...

class ExtensionOptionError(DataError): ...
class BadOptionError(ExtensionOptionError): ...
class BadOptionDataError(ExtensionOptionError): ...
class DuplicateOptionError(ExtensionOptionError): ...

def extract_extension_options(field_list, options_spec): ...
def extract_options(field_list): ...
def assemble_option_dict(option_list, options_spec): ...

class NameValueError(DataError): ...

def decode_path(path): ...
def extract_name_value(line): ...
def new_reporter(source_path, settings): ...
def new_document(source_path, settings: Optional[Any] = ...): ...
def clean_rcs_keywords(paragraph, keyword_substitutions): ...
def relative_path(source, target): ...
def get_stylesheet_reference(settings, relative_to: Optional[Any] = ...): ...
def get_stylesheet_list(settings): ...
def find_file_in_dirs(path, dirs): ...
def get_trim_footnote_ref_space(settings): ...
def get_source_line(node): ...
def escape2null(text): ...
def unescape(text, restore_backslashes: bool = ..., respect_whitespace: bool = ...): ...
def split_escaped_whitespace(text): ...
def strip_combining_chars(text): ...
def find_combining_chars(text): ...
def column_indices(text): ...

east_asian_widths: Any

def column_width(text): ...
def uniq(L): ...
def unique_combinations(items, n): ...
def normalize_language_tag(tag): ...

class DependencyList:
    def __init__(self, output_file: Optional[Any] = ..., dependencies: Any = ...) -> None: ...
    list: Any = ...
    file: Any = ...
    def set_output(self, output_file): ...
    def add(self, *filenames): ...
    def close(self): ...

release_level_abbreviations: Any

def version_identifier(version_info: Optional[Any] = ...): ...
