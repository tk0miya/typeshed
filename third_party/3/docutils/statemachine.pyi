# Stubs for docutils.statemachine (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

__docformat__: str

class StateMachine:
    input_lines: Any = ...
    input_offset: int = ...
    line: Any = ...
    line_offset: int = ...
    debug: Any = ...
    initial_state: Any = ...
    current_state: Any = ...
    states: Any = ...
    observers: Any = ...
    def __init__(self, state_classes, initial_state, debug: bool = ...) -> None: ...
    def unlink(self): ...
    def run(self, input_lines, input_offset: int = ..., context: Optional[Any] = ..., input_source: Optional[Any] = ..., initial_state: Optional[Any] = ...): ...
    def get_state(self, next_state: Optional[Any] = ...): ...
    def next_line(self, n: int = ...): ...
    def is_next_line_blank(self): ...
    def at_eof(self): ...
    def at_bof(self): ...
    def previous_line(self, n: int = ...): ...
    def goto_line(self, line_offset): ...
    def get_source(self, line_offset): ...
    def abs_line_offset(self): ...
    def abs_line_number(self): ...
    def get_source_and_line(self, lineno: Optional[Any] = ...): ...
    def insert_input(self, input_lines, source): ...
    def get_text_block(self, flush_left: bool = ...): ...
    def check_line(self, context, state, transitions: Optional[Any] = ...): ...
    def add_state(self, state_class): ...
    def add_states(self, state_classes): ...
    def runtime_init(self): ...
    def error(self): ...
    def attach_observer(self, observer): ...
    def detach_observer(self, observer): ...
    def notify_observers(self): ...

class State:
    patterns: Any = ...
    initial_transitions: Any = ...
    nested_sm: Any = ...
    nested_sm_kwargs: Any = ...
    transition_order: Any = ...
    transitions: Any = ...
    state_machine: Any = ...
    debug: Any = ...
    def __init__(self, state_machine, debug: bool = ...) -> None: ...
    def runtime_init(self): ...
    def unlink(self): ...
    def add_initial_transitions(self): ...
    def add_transitions(self, names, transitions): ...
    def add_transition(self, name, transition): ...
    def remove_transition(self, name): ...
    def make_transition(self, name, next_state: Optional[Any] = ...): ...
    def make_transitions(self, name_list): ...
    def no_match(self, context, transitions): ...
    def bof(self, context): ...
    def eof(self, context): ...
    def nop(self, match, context, next_state): ...

class StateMachineWS(StateMachine):
    def get_indented(self, until_blank: bool = ..., strip_indent: bool = ...): ...
    def get_known_indented(self, indent, until_blank: bool = ..., strip_indent: bool = ...): ...
    def get_first_known_indented(self, indent, until_blank: bool = ..., strip_indent: bool = ..., strip_top: bool = ...): ...

class StateWS(State):
    indent_sm: Any = ...
    indent_sm_kwargs: Any = ...
    known_indent_sm: Any = ...
    known_indent_sm_kwargs: Any = ...
    ws_patterns: Any = ...
    ws_initial_transitions: Any = ...
    def __init__(self, state_machine, debug: bool = ...) -> None: ...
    patterns: Any = ...
    def add_initial_transitions(self): ...
    def blank(self, match, context, next_state): ...
    def indent(self, match, context, next_state): ...
    def known_indent(self, match, context, next_state): ...
    def first_known_indent(self, match, context, next_state): ...

class _SearchOverride:
    def match(self, pattern): ...

class SearchStateMachine(_SearchOverride, StateMachine): ...
class SearchStateMachineWS(_SearchOverride, StateMachineWS): ...

class ViewList:
    data: Any = ...
    items: Any = ...
    parent: Any = ...
    parent_offset: Any = ...
    def __init__(self, initlist: Optional[Any] = ..., source: Optional[Any] = ..., items: Optional[Any] = ..., parent: Optional[Any] = ..., parent_offset: Optional[Any] = ...) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __cmp__(self, other): ...
    def __contains__(self, item): ...
    def __len__(self): ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, item): ...
    def __delitem__(self, i): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __iadd__(self, other): ...
    def __mul__(self, n): ...
    __rmul__: Any = ...
    def __imul__(self, n): ...
    def extend(self, other): ...
    def append(self, item, source: Optional[Any] = ..., offset: int = ...): ...
    def insert(self, i, item, source: Optional[Any] = ..., offset: int = ...): ...
    def pop(self, i: int = ...): ...
    def trim_start(self, n: int = ...): ...
    def trim_end(self, n: int = ...): ...
    def remove(self, item): ...
    def count(self, item): ...
    def index(self, item): ...
    def reverse(self): ...
    def sort(self, *args): ...
    def info(self, i): ...
    def source(self, i): ...
    def offset(self, i): ...
    def disconnect(self): ...
    def xitems(self): ...
    def pprint(self): ...

class StringList(ViewList):
    def trim_left(self, length, start: int = ..., end: Any = ...): ...
    def get_text_block(self, start, flush_left: bool = ...): ...
    def get_indented(self, start: int = ..., until_blank: bool = ..., strip_indent: bool = ..., block_indent: Optional[Any] = ..., first_indent: Optional[Any] = ...): ...
    def get_2D_block(self, top, left, bottom, right, strip_indent: bool = ...): ...
    def pad_double_width(self, pad_char): ...
    def replace(self, old, new): ...

class StateMachineError(Exception): ...
class UnknownStateError(StateMachineError): ...
class DuplicateStateError(StateMachineError): ...
class UnknownTransitionError(StateMachineError): ...
class DuplicateTransitionError(StateMachineError): ...
class TransitionPatternNotFound(StateMachineError): ...
class TransitionMethodNotFound(StateMachineError): ...
class UnexpectedIndentationError(StateMachineError): ...
class TransitionCorrection(Exception): ...
class StateCorrection(Exception): ...

def string2lines(astring, tab_width: int = ..., convert_whitespace: bool = ..., whitespace: Any = ...): ...
