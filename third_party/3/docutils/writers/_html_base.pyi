# Stubs for docutils.writers._html_base (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from docutils import nodes, writers
from typing import Any, Optional

class PIL: ...

class Writer(writers.Writer):
    supported: Tuple[str, ...] = ...
    default_template: str = ...
    settings_defaults: Dict[str, str] = ...
    config_section_dependencies: List[str] = ...
    visitor_attributes: List[str] = ...
    def get_transforms(self) -> List[Type[Transform]]: ...
    visitor: Any = ...
    output: Any = ...
    def translate(self): ...
    def apply_template(self): ...
    def interpolation_dict(self): ...
    def assemble_parts(self): ...

class HTMLTranslator(nodes.NodeVisitor):
    xml_declaration: str = ...
    doctype: str = ...
    doctype_mathml: Any = ...
    head_prefix_template: str = ...
    content_type: str = ...
    generator: str = ...
    mathjax_script: str = ...
    mathjax_url: str = ...
    stylesheet_link: str = ...
    embedded_stylesheet: str = ...
    words_and_spaces: Any = ...
    in_word_wrap_point: Any = ...
    lang_attribute: str = ...
    special_characters: Any = ...
    settings: Any = ...
    language: Any = ...
    meta: Any = ...
    head_prefix: Any = ...
    html_prolog: Any = ...
    head: Any = ...
    stylesheet: Any = ...
    body_prefix: Any = ...
    body_pre_docinfo: Any = ...
    docinfo: Any = ...
    body: Any = ...
    fragment: Any = ...
    body_suffix: Any = ...
    section_level: int = ...
    initial_header_level: Any = ...
    math_output: Any = ...
    math_output_options: Any = ...
    context: Any = ...
    topic_classes: Any = ...
    colspecs: Any = ...
    compact_p: bool = ...
    compact_simple: bool = ...
    compact_field_list: bool = ...
    in_docinfo: bool = ...
    in_sidebar: bool = ...
    in_footnote_list: bool = ...
    title: Any = ...
    subtitle: Any = ...
    header: Any = ...
    footer: Any = ...
    html_head: Any = ...
    html_title: Any = ...
    html_subtitle: Any = ...
    html_body: Any = ...
    in_document_title: int = ...
    in_mailto: bool = ...
    author_in_authors: bool = ...
    math_header: Any = ...
    def __init__(self, document) -> None: ...
    def astext(self): ...
    def encode(self, text): ...
    def cloak_mailto(self, uri): ...
    def cloak_email(self, addr): ...
    def attval(self, text, whitespace: Any = ...): ...
    def stylesheet_call(self, path): ...
    def starttag(self, node, tagname, suffix: str = ..., empty: bool = ..., **attributes): ...
    def emptytag(self, node, tagname, suffix: str = ..., **attributes): ...
    def set_class_on_child(self, node, class_, index: int = ...): ...
    def visit_Text(self, node): ...
    def depart_Text(self, node): ...
    def visit_abbreviation(self, node): ...
    def depart_abbreviation(self, node): ...
    def visit_acronym(self, node): ...
    def depart_acronym(self, node): ...
    def visit_address(self, node): ...
    def depart_address(self, node): ...
    def visit_admonition(self, node): ...
    def depart_admonition(self, node: Optional[Any] = ...): ...
    attribution_formats: Any = ...
    def visit_attribution(self, node): ...
    def depart_attribution(self, node): ...
    def visit_author(self, node): ...
    def depart_author(self, node): ...
    def visit_authors(self, node): ...
    def depart_authors(self, node): ...
    def visit_block_quote(self, node): ...
    def depart_block_quote(self, node): ...
    def check_simple_list(self, node): ...
    def is_compactable(self, node): ...
    def visit_bullet_list(self, node): ...
    def depart_bullet_list(self, node): ...
    def visit_caption(self, node): ...
    def depart_caption(self, node): ...
    def visit_citation(self, node): ...
    def depart_citation(self, node): ...
    def visit_citation_reference(self, node): ...
    def depart_citation_reference(self, node): ...
    def visit_classifier(self, node): ...
    def depart_classifier(self, node): ...
    def visit_colspec(self, node): ...
    def depart_colspec(self, node): ...
    def visit_comment(self, node, sub: Any = ...): ...
    def visit_compound(self, node): ...
    def depart_compound(self, node): ...
    def visit_container(self, node): ...
    def depart_container(self, node): ...
    def visit_contact(self, node): ...
    def depart_contact(self, node): ...
    def visit_copyright(self, node): ...
    def depart_copyright(self, node): ...
    def visit_date(self, node): ...
    def depart_date(self, node): ...
    def visit_decoration(self, node): ...
    def depart_decoration(self, node): ...
    def visit_definition(self, node): ...
    def depart_definition(self, node): ...
    def visit_definition_list(self, node): ...
    def depart_definition_list(self, node): ...
    def visit_definition_list_item(self, node): ...
    def depart_definition_list_item(self, node): ...
    def visit_description(self, node): ...
    def depart_description(self, node): ...
    def visit_docinfo(self, node): ...
    def depart_docinfo(self, node): ...
    def visit_docinfo_item(self, node, name, meta: bool = ...): ...
    def depart_docinfo_item(self): ...
    def visit_doctest_block(self, node): ...
    def depart_doctest_block(self, node): ...
    def visit_document(self, node): ...
    def depart_document(self, node): ...
    def visit_emphasis(self, node): ...
    def depart_emphasis(self, node): ...
    def visit_entry(self, node): ...
    def depart_entry(self, node): ...
    def visit_enumerated_list(self, node): ...
    def depart_enumerated_list(self, node): ...
    def visit_field_list(self, node): ...
    def depart_field_list(self, node): ...
    def visit_field(self, node): ...
    def depart_field(self, node): ...
    def visit_field_name(self, node): ...
    def depart_field_name(self, node): ...
    def visit_field_body(self, node): ...
    def depart_field_body(self, node): ...
    def visit_figure(self, node): ...
    def depart_figure(self, node): ...
    def visit_footer(self, node): ...
    def depart_footer(self, node): ...
    def visit_footnote(self, node): ...
    def depart_footnote(self, node): ...
    def visit_footnote_reference(self, node): ...
    def depart_footnote_reference(self, node): ...
    def visit_generated(self, node): ...
    def depart_generated(self, node): ...
    def visit_header(self, node): ...
    def depart_header(self, node): ...
    object_image_types: Any = ...
    def visit_image(self, node): ...
    def depart_image(self, node): ...
    def visit_inline(self, node): ...
    def depart_inline(self, node): ...
    def visit_label(self, node): ...
    def depart_label(self, node): ...
    def visit_legend(self, node): ...
    def depart_legend(self, node): ...
    def visit_line(self, node): ...
    def depart_line(self, node): ...
    def visit_line_block(self, node): ...
    def depart_line_block(self, node): ...
    def visit_list_item(self, node): ...
    def depart_list_item(self, node): ...
    def visit_literal(self, node): ...
    def depart_literal(self, node): ...
    def visit_literal_block(self, node): ...
    def depart_literal_block(self, node): ...
    math_tags: Any = ...
    def visit_math(self, node, math_env: str = ...): ...
    def depart_math(self, node): ...
    def visit_math_block(self, node): ...
    def depart_math_block(self, node): ...
    def visit_meta(self, node): ...
    def depart_meta(self, node): ...
    def add_meta(self, tag): ...
    def visit_option(self, node): ...
    def depart_option(self, node): ...
    def visit_option_argument(self, node): ...
    def depart_option_argument(self, node): ...
    def visit_option_group(self, node): ...
    def depart_option_group(self, node): ...
    def visit_option_list(self, node): ...
    def depart_option_list(self, node): ...
    def visit_option_list_item(self, node): ...
    def depart_option_list_item(self, node): ...
    def visit_option_string(self, node): ...
    def depart_option_string(self, node): ...
    def visit_organization(self, node): ...
    def depart_organization(self, node): ...
    def visit_paragraph(self, node): ...
    def depart_paragraph(self, node): ...
    def visit_problematic(self, node): ...
    def depart_problematic(self, node): ...
    def visit_raw(self, node): ...
    def visit_reference(self, node): ...
    def depart_reference(self, node): ...
    def visit_revision(self, node): ...
    def depart_revision(self, node): ...
    def visit_row(self, node): ...
    def depart_row(self, node): ...
    def visit_rubric(self, node): ...
    def depart_rubric(self, node): ...
    def visit_section(self, node): ...
    def depart_section(self, node): ...
    def visit_sidebar(self, node): ...
    def depart_sidebar(self, node): ...
    def visit_status(self, node): ...
    def depart_status(self, node): ...
    def visit_strong(self, node): ...
    def depart_strong(self, node): ...
    def visit_subscript(self, node): ...
    def depart_subscript(self, node): ...
    def visit_substitution_definition(self, node): ...
    def visit_substitution_reference(self, node): ...
    def visit_subtitle(self, node): ...
    def depart_subtitle(self, node): ...
    def visit_superscript(self, node): ...
    def depart_superscript(self, node): ...
    def visit_system_message(self, node): ...
    def depart_system_message(self, node): ...
    def visit_table(self, node): ...
    def depart_table(self, node): ...
    def visit_target(self, node): ...
    def depart_target(self, node): ...
    def visit_tbody(self, node): ...
    def depart_tbody(self, node): ...
    def visit_term(self, node): ...
    def depart_term(self, node): ...
    def visit_tgroup(self, node): ...
    def depart_tgroup(self, node): ...
    def visit_thead(self, node): ...
    def depart_thead(self, node): ...
    def visit_title(self, node): ...
    def depart_title(self, node): ...
    def visit_title_reference(self, node): ...
    def depart_title_reference(self, node): ...
    def visit_topic(self, node): ...
    def depart_topic(self, node): ...
    def visit_transition(self, node): ...
    def depart_transition(self, node): ...
    def visit_version(self, node): ...
    def depart_version(self, node): ...
    def unimplemented_visit(self, node): ...

class SimpleListChecker(nodes.GenericNodeVisitor):
    def default_visit(self, node): ...
    def visit_list_item(self, node): ...
    def pass_node(self, node): ...
    def ignore_node(self, node): ...
    visit_Text: Any = ...
    visit_paragraph: Any = ...
    visit_bullet_list: Any = ...
    visit_enumerated_list: Any = ...
    visit_docinfo: Any = ...
    visit_author: Any = ...
    visit_authors: Any = ...
    visit_address: Any = ...
    visit_contact: Any = ...
    visit_copyright: Any = ...
    visit_date: Any = ...
    visit_organization: Any = ...
    visit_status: Any = ...
    visit_version: Any = ...
    visit_definition_list: Any = ...
    visit_definition_list_item: Any = ...
    visit_term: Any = ...
    visit_classifier: Any = ...
    visit_definition: Any = ...
    visit_field_list: Any = ...
    visit_field: Any = ...
    visit_field_body: Any = ...
    visit_field_name: Any = ...
    visit_comment: Any = ...
    visit_substitution_definition: Any = ...
    visit_target: Any = ...
    visit_pending: Any = ...
