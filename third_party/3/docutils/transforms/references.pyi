# Stubs for docutils.transforms.references (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from docutils import nodes
from docutils.transforms import Transform
from typing import Any

__docformat__: str

class PropagateTargets(Transform):
    default_priority: int = ...
    def apply(self): ...

class AnonymousHyperlinks(Transform):
    default_priority: int = ...
    def apply(self): ...

class IndirectHyperlinks(Transform):
    default_priority: int = ...
    def apply(self): ...
    def resolve_indirect_target(self, target): ...
    def nonexistent_indirect_target(self, target): ...
    def circular_indirect_reference(self, target): ...
    def indirect_target_error(self, target, explanation): ...
    def resolve_indirect_references(self, target): ...

class ExternalTargets(Transform):
    default_priority: int = ...
    def apply(self): ...

class InternalTargets(Transform):
    default_priority: int = ...
    def apply(self): ...
    def resolve_reference_ids(self, target): ...

class Footnotes(Transform):
    default_priority: int = ...
    autofootnote_labels: Any = ...
    symbols: Any = ...
    def apply(self): ...
    def number_footnotes(self, startnum): ...
    def number_footnote_references(self, startnum): ...
    def symbolize_footnotes(self): ...
    def resolve_footnotes_and_citations(self): ...
    def resolve_references(self, note, reflist): ...

class CircularSubstitutionDefinitionError(Exception): ...

class Substitutions(Transform):
    default_priority: int = ...
    def apply(self): ...

class TargetNotes(Transform):
    default_priority: int = ...
    classes: Any = ...
    def __init__(self, document, startnode) -> None: ...
    def apply(self): ...
    def make_target_footnote(self, refuri, refs, notes): ...

class DanglingReferences(Transform):
    default_priority: int = ...
    def apply(self): ...

class DanglingReferencesVisitor(nodes.SparseNodeVisitor):
    document: Any = ...
    unknown_reference_resolvers: Any = ...
    def __init__(self, document, unknown_reference_resolvers) -> None: ...
    def unknown_visit(self, node): ...
    def visit_reference(self, node): ...
    visit_footnote_reference: Any = ...
    visit_citation_reference: Any = ...
